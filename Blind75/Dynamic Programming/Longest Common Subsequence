# O(len(text1) * len(text2)) Dynamic Programming
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        Len_1, Len_2 = len(text1), len(text2)

        # 建立 DP 矩陣，大小 (Len_1+1) x (Len_2+1)，初始化為 0
        dp_matrix = [[0] * (Len_2 + 1) for _ in range(Len_1 + 1)]

        # 填 DP 表格
        for i in range(1, Len_1 + 1):
            for j in range(1, Len_2 + 1):
                if text1[i - 1] == text2[j - 1]:
                    # 如果字母相同，就把對角線左上角值 + 1
                    dp_matrix[i][j] = dp_matrix[i - 1][j - 1] + 1
                else:
                    # 否則取「上方」或「左方」的最大值
                    dp_matrix[i][j] = max(dp_matrix[i - 1][j], dp_matrix[i][j - 1])

        return dp_matrix[Len_1][Len_2]
